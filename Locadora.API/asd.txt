    services.AddControllers()
            .AddNewtonsoftJson(
                opt => opt.SerializerSettings.ReferenceLoopHandling =
                    Newtonsoft.Json.ReferenceLoopHandling.Ignore);

    services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

    services.AddScoped<IRepository, Repository>();

    services.AddVersionedApiExplorer(options => 
    {
        options.GroupNameFormat = "'v'VVV";
        options.SubstituteApiVersionInUrl = true;
    })
    .AddApiVersioning(options => 
    {
        options.DefaultApiVersion = new ApiVersion(1, 0);
        options.AssumeDefaultVersionWhenUnspecified = true;
        options.ReportApiVersions = true;
    });
}
    var apiProviderDescription = services.BuildServiceProvider()
                                         .GetService<IApiVersionDescriptionProvider>();

    services.AddSwaggerGen(options => {
        foreach (var description in apiProviderDescription.ApiVersionDescriptions)
        {
            options.SwaggerDoc(
                description.GroupName,
                new Microsoft.OpenApi.Models.OpenApiInfo()
                {
                    Title = "SmartSchool API",
                    Version = description.ApiVersion.ToString(),
                    TermsOfService = new Uri("http://SeusTermosDeUso.com"),
                    Description = "A descrição da WebAPI do SmartSchool",
                    License = new Microsoft.OpenApi.Models.OpenApiLicense
                    {
                        Name = "SmartSchool License",
                        Url = new Uri("http://mit.com")
                    },
                    Contact = new Microsoft.OpenApi.Models.OpenApiContact
                    {
                        Name = "Vinícius de Andrade",
                        Email = "",
                        Url = new Uri("http://programadamente.com")
                    }
                }    
            );
        }

        var xmlCommentsFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
        var xmlCommentsFullPath = Path.Combine(AppContext.BaseDirectory, xmlCommentsFile);

        options.IncludeXmlComments(xmlCommentsFullPath);
    });
    services.AddCors();
}

private void AddNewtonsoftJson(Func<object, object> value) {
    throw new NotImplementedException();
}

// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
public void Configure(IApplicationBuilder app, 
                      IWebHostEnvironment env,
                      IApiVersionDescriptionProvider apiProviderDescription)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

     app.UseHttpsRedirection();

    app.UseRouting();
    app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

    app.UseSwagger()
       .UseSwaggerUI(options =>
       {
           foreach (var description in apiProviderDescription.ApiVersionDescriptions)
           {                       
                options.SwaggerEndpoint(
                    $"/swagger/{description.GroupName}/swagger.json", 
                    description.GroupName.ToUpperInvariant());
           }
           options.RoutePrefix = "";
       });

     app.UseAuthorization();

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });
}